def getApplicantType(map,a) {
    import java.time.LocalDate;
    import java.time.LocalDateTime;
    import java.time.format.DateTimeFormatter;
    import java.time.Period;
  
    String itc = null;
    String dob = null;
    String genderType = null;
    boolean isBioExPresent  = false;
    String FOREIGNER = "FR";
    String NON_FOREIGNER = "NFR";
    String MALE = "MLE";
    String FEMALE = "FLE";
    String CHILD = "CHL";
    String ADULT = "ADL";
    String ATTR_INDIVIDUAL_TYPE = "individualTypeCode";
    String ATTR_DATE_OF_BIRTH = "dateofbirth";
    String ATTR_GENDER_TYPE = "genderCode";
    String ATTR_BIOMETRIC_EXCEPTION_TYPE = "biometricAvailable";
    String UTC_DATETIME_PATTERN = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'";
            
    itc= (String) map[ATTR_INDIVIDUAL_TYPE];
            
    dob= (String) map[ATTR_DATE_OF_BIRTH];
     
    if(dob == empty  || dob == null ){
       return "KER-MSD-147";
    }
   
    int age = -1;
    LocalDate currentDate = LocalDate.now();
    
    LocalDate birthDate = LocalDateTime.parse(dob, DateTimeFormatter.ofPattern(UTC_DATETIME_PATTERN)).toLocalDate();
    
    if (birthDate != null && currentDate != null && !birthDate.isAfter(currentDate)) {
        age = Period.between(birthDate, currentDate).getYears();
    }
    else {
       return age;
    }
     
    
    genderType=(String) map[ATTR_GENDER_TYPE];
    isBioExPresent =(Boolean)map[ATTR_BIOMETRIC_EXCEPTION_TYPE];
    
    if (((itc == empty  || itc == null)  && (dob == -1 )  && (genderType == empty  || genderType == null ) && (isBioExPresent == empty || isBioExPresent == null)))  
      return "KER-MSD-147";
    if(age >= agelimit)
       ageCode=ADULT;
    else if( age >= 0 && age < agelimit)
       ageCode=CHILD;
    
    if (itc == FOREIGNER &&  genderType == MALE  && ageCode == CHILD  && !isBioExPresent )  {
        
        return "A001";
    } else if (itc == FOREIGNER  && genderType == MALE  && ageCode == ADULT  && !isBioExPresent )  {
        
        return "A002";
   
    } else if (itc == NON_FOREIGNER  && genderType == MALE  && ageCode == CHILD  && !isBioExPresent )  {
        
        return "A003";
   
    } else if (itc == NON_FOREIGNER  && genderType == MALE  && ageCode == ADULT  && !isBioExPresent )  {
        
        return "A004";
   
    } else if (itc == FOREIGNER  && genderType == FEMALE  && ageCode == CHILD  && !isBioExPresent )  {
        
        return "A005";
   
    } else if (itc == FOREIGNER  && genderType == FEMALE  && ageCode == ADULT  && !isBioExPresent )  {
        
        return "A006";
   
    } else if (itc == NON_FOREIGNER  && genderType == FEMALE  && ageCode == CHILD  && !isBioExPresent )  {
    
        return "A007";
   
    } else if (itc == NON_FOREIGNER  && genderType == FEMALE  && ageCode == ADULT  && !isBioExPresent )  {
        
        return "A008";
   
    } else if (itc == FOREIGNER  && genderType == MALE  && ageCode == CHILD  && isBioExPresent )  {
        
        return "A009";
   
    } else if (itc == FOREIGNER  && genderType == MALE  && ageCode == ADULT  && isBioExPresent )  {
        
        return "A010";
   
    } else if (itc == NON_FOREIGNER  && genderType == MALE  && ageCode == CHILD  && isBioExPresent )  {
        
        return "A011";
   
    } else if (itc == NON_FOREIGNER  && genderType == MALE  && ageCode == ADULT  && isBioExPresent )  {
        
        return "A012";
   
    } else if (itc == FOREIGNER  && genderType == FEMALE  && ageCode == CHILD  && isBioExPresent )  {
        
        return "A013";
   
    } else if (itc == FOREIGNER  && genderType == FEMALE  && ageCode == ADULT  && isBioExPresent )  {
        
        return "A014";
   
    } else if (itc == NON_FOREIGNER  && genderType == FEMALE  && ageCode == CHILD  && isBioExPresent )  {
        
        return "A015";
   
    } else if (itc == NON_FOREIGNER  && genderType == FEMALE  && ageCode == ADULT  && isBioExPresent )  {
        
        return "A016";
   
    }
    return null;

};
