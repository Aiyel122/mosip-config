import hudson.EnvVars;
import hudson.slaves.EnvironmentVariablesNodeProperty;
import hudson.slaves.NodeProperty;
import hudson.slaves.NodePropertyDescriptor;
import hudson.util.DescribableList;
import jenkins.model.Jenkins;
node {
 // def mvnHome = tool name: 'M2_HOME', type: 'maven'
 def branch = 'master'
 def newVersion
 // Asking user if he wants to promote the code to QA, user will choose either proceed or abort
 stage('checkout') {
  input 'Do you want to promote the code to QA?'
  dir(branch) {
   checkout([$class: 'GitSCM',
    branches: [
     [name: branch]
    ],
    extensions: scm.extensions + [[$class: 'CleanCheckout']],
    userRemoteConfigs: [
     [url: 'git@github.com:mosip/mosip-configuration.git', credentialsId: 'aruna']
    ]
   ])
  }
 }
 // creating a git tag
      sh "git tag ${newVersion}"
	  // pushing tag to github
      sshagent(['aruna']) {
      sh "git push origin ${newVersion}"
      }
 
  }
  // Clean the workspace to avoid GIT conflicts when next time this pipeline is triggered
  	cleanWs()
 

